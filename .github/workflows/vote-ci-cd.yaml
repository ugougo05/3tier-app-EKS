name: CI / CD Pipeline
run-name: ${{ github.actor}} is Deploying
 
on:
  push:
    branches:
      - main
    tags:
      - '*'
  workflow_dispatch:
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
 
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
 
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ugougo05/my-vote:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/ugougo05/my-vote:latest

            ${{ secrets.DOCKER_USERNAME }}/ugougo05/my-worker::${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/ugougo05/my-worker:latest

            ${{ secrets.DOCKER_USERNAME }}/ugougo05/result:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/ugougo05/result:latest
 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
 
      - name: Install kubectl
        run: |
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.32.0/2024-12-20/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin
          mv ./kubectl $HOME/bin/kubectl
          echo "::add-path::$HOME/bin"
 
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.AWS_CLUSTER }}
 
      - name: Generate the final deployment template
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext-base
          export IMAGE_NAME="docker.io/${{ secrets.DOCKER_USERNAME }}/ugougo05/my-vote:${{ env.IMAGE_TAG }}"
          envsubst < k8s/deployment.template.yaml > k8s/vote-deploy+service.yaml
          echo "k8s/vote-deploy+service.yaml:"
          cat k8s/vote-deploy+service.yaml

          export IMAGE_NAME="docker.io/${{ secrets.DOCKER_USERNAME }}/ugougo05/my-worker:${{ env.IMAGE_TAG }}"
          envsubst < k8s/deployment.template.yaml > k8s/result-deploy+service.yaml
          echo "Final k8s/result-deploy+service.yaml:"
          cat k8s/result-deploy+service.yaml

          export IMAGE_NAME="docker.io/${{ secrets.DOCKER_USERNAME }}/ugougo05/result:${{ env.IMAGE_TAG }}"
          envsubst < k8s/deployment.template.yaml > k8s/deployment.yaml
          echo "Final k8s/worker-deploy+service.yaml:"
          cat k8s/worker-deploy+service.yaml
 
 
 
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/
          kubectl apply -f k8s/vote-deploy+service.yaml
          kubectl apply -f k8s/result-deploy+service.yaml
          kubectl apply -f k8s/worker-deploy+service.yaml

      - name: Restart Deployments to Pull Latest Image # Need this because Kubernetes does not automatically pull a new image if the tag remains similar

        run: |
          kubectl rollout restart deployment/result-deployment
          kubectl rollout restart deployment/worker-deployment
          kubectl rollout restart deployment/vote-deployment
